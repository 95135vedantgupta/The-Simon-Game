alert("Ready for a game? :)")

var buttonColours = ["red", "blue", "green", "yellow"];  //array of all button colours

var gamePattern = [];   //stores whole sequence of colours game has generated till now
var userClickedPattern = [];  //storing all colours which user has clicked till now

var started = false;
var level = 0;
var max_score_count =0;  //users highest score

$(document).keypress(function() {
  if (!started) {
    $("#level-title").text("Level " + level);
    nextSequence();
    started = true;
  }
});   //****semicolon comes after HANDLER FUNCTION

$(".btn").click(function() {

  var userChosenColour = $(this).attr("id");   //stores the colour user chose
  userClickedPattern.push(userChosenColour);   //array storing all the colours user store till now

  playSound(userChosenColour);
  animatePress(userChosenColour);

  //2. Call checkAnswer() after a user has clicked and chosen their answer, passing in the index of the last answer in the user's sequence.
  checkAnswer(userClickedPattern.length-1);
});   //****semicolon comes after HANDLER FUNCTION


//1. Create a new function called checkAnswer(), it should take one input with the name currentLevel
function checkAnswer(currentLevel) {

    //3. Write an if statement inside checkAnswer() to check if the most recent user answer is the same as the game pattern. If so then log "success", otherwise log "wrong".
    if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
  //4. If the user got the most recent answer right in step 3, then check that they have finished their sequence with another if statement.
      if (userClickedPattern.length === gamePattern.length){

        //5. Call nextSequence() after a 1000 millisecond delay.
        setTimeout(function () {
          nextSequence();
        }, 1000);

        if(level>max_score_count)  //to increase the max score count with the game
        {
          max_score_count=level;
          document.getElementById('max_score').innerHTML=`${max_score_count}`;
        }
      }
    }
    else{
      playSound("wrong");  //remember inverted commas for parameter WHILE CALLING FUNCTION

      $("#body_id").addClass("game-over"); // # comes with ID in jquery
      setTimeout(function () {    // for wrong ans animation
        $("#body_id").removeClass("game-over");
      }, 100);

      document.getElementById("level-title").innerHTML="Game Over, Press Any Key to Restart";  //no # in id in js,,,its only for jquery

      startOver();  //function to restart game
    }
}

function nextSequence() {

  //6. Once nextSequence() is triggered, reset the userClickedPattern to an empty array ready for the next level.
  userClickedPattern = [];

  level++;
  $("#level-title").text("Level " + level); // OR document.getElementById("level-title").innerHTML="Level"+level;
  var randomNumber = Math.floor(Math.random() * 4);
  var randomChosenColour = buttonColours[randomNumber];   //stores the random colour generated by the game
  gamePattern.push(randomChosenColour);

  $("#" + randomChosenColour).fadeIn(100).fadeOut(100).fadeIn(100);   //use # while accessing ids in jquery
  playSound(randomChosenColour);  //audio for that button which game tells us to chose
}

function playSound(name) {
  var audio = new Audio("sounds/" + name + ".mp3");
  audio.play();
}

function animatePress(currentColor) {
  $("#" + currentColor).addClass("pressed");
  setTimeout(function () {
    $("#" + currentColor).removeClass("pressed");
  }, 100);
}

function startOver(){    //function for restarting whole game after user loses
  level=0;
  started=false;
  gamePattern=[];
}
